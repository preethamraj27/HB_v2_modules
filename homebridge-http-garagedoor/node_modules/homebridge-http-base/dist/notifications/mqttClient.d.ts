/// <reference types="node" />
import { Service } from "hap-nodejs";
import { CloseCallback, MqttClient, QoS, Packet, IConnackPacket, IClientPublishOptions, PacketCallback, IClientOptions } from "mqtt";
import { MQTTPublishObject, MQTTSubscribeObject, MQTTSubscriptionObject } from "../configparser";
import { EventEmitter } from "events";
export declare type MQTTSubscription = {
    topic: string;
    characteristic: string;
    qos: QoS;
    messagePattern?: string;
    patternGroupToExtract: number;
};
declare type InternalMQTTSubscription = {
    characteristic: string;
    qos: QoS;
    messagePattern?: RegExp;
    patternGroupToExtract: number;
    isBool: boolean;
};
export declare class MQTTClient extends EventEmitter {
    service: Service;
    mqttOptions: IClientOptions;
    log: any;
    debug: boolean;
    subscriptions: Record<string, InternalMQTTSubscription[]>;
    client?: MqttClient;
    constructor(service: Service, options: IClientOptions & MQTTSubscriptionObject, log: any, debug?: boolean);
    connect(): void;
    end(force: boolean, closeCallback: CloseCallback): void;
    subscribe(mqttGetTopic: MQTTSubscribeObject, characteristic: string): void;
    _addSubscription(subscription: MQTTSubscription): void;
    publish(mqttSetTopic: MQTTPublishObject, value: string, callback?: PacketCallback): void;
    multiplePublish(mqttSetTopicArray: MQTTPublishObject[], value: string): void;
    _publish(topic: string, message: string, options: IClientPublishOptions, callback?: PacketCallback): void;
    _connected(connack: IConnackPacket): void;
    _error(error: Error): void;
    _message(topic: string, payload: Buffer, packet: Packet): void;
}
export {};
//# sourceMappingURL=mqttClient.d.ts.map