import { IClientOptions, QoS } from "mqtt";
import { MQTTSubscription } from "./notifications/mqttClient";
export declare type Credentials = {
    username?: string;
    password?: string;
    sendImmediately?: boolean;
};
export declare class UrlObject {
    url: string;
    method: string;
    body: string;
    repeat: number;
    delayBeforeExecution: number;
    auth: Credentials;
    headers: Record<string, string>;
    strictSSL: boolean;
    requestTimeout: number;
    constructor(url: string);
}
export declare type HeaderKeyValues = {
    key: string;
    value: string;
};
export declare type MQTTSubscriptionObject = {
    subscriptions: MQTTSubscription[];
};
export declare class MQTTSubscribeObject {
    topic: string;
    qos: QoS;
    messagePattern?: string;
    patternGroupToExtract: number;
    constructor(topic: string);
}
export declare class MQTTPublishObject {
    topic: string;
    qos: QoS;
    retain: boolean;
    dup?: boolean;
    payloadFormatter?: Function;
    constructor(topic: string);
}
export declare function parsePattern(property: any): RegExp;
export declare function parseUrlProperty(property: any): UrlObject;
export declare function parseMultipleUrlProperty(property: any): UrlObject[];
export declare function parseMQTTOptions(property: any): IClientOptions & MQTTSubscriptionObject;
export declare function parseMQTTSubscriptions(property: any): MQTTSubscription[];
export declare function parseMQTTGetTopicProperty(property: any): MQTTSubscribeObject;
export declare function parseMQTTSetTopicProperty(property: any): MQTTPublishObject;
export declare function parseMultipleMQTTSetTopicsProperty(property: any): MQTTPublishObject[];
//# sourceMappingURL=configparser.d.ts.map